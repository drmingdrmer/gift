#!/usr/bin/env python3
# coding: utf-8

import copy
import inspect
import os
import sys
import logging

import yaml

import k3log
import k3proc
from k3fs import fread
from k3fs import fwrite
from k3git import GitOpt
from k3handy import cmd0
from k3handy import cmdout
from k3handy import cmdpass
from k3handy import cmdtty
from k3handy import cmdx
from k3handy import dd
from k3handy import ddstack
from k3handy import display
from k3handy import pabs
from k3handy import pjoin
from k3handy import prebase
from k3proc import CalledProcessError
from k3str import to_utf8

version = '0.1.0'
conffn = ".gift"
refsfn = ".gift-refs"
superref = "refs/remotes/super/head"

logger = logging.getLogger(__name__)


class GiftError(Exception):
    def __init__(self, msg):
        super(GiftError, self).__init__(msg)
        self.returncode = 2
        self.out = []
        self.err = [msg]


class Gift(object):
    """
    """

    # inside gitdir:
    sub_gitdir_fmt = "gift/subdir/{dir}"

    def __init__(self, opt):
        self.gitopt = opt
        if self.gitopt.opt.get('exec_path') is None:
            self.gitpath = 'git'
        else:
            self.gitpath = pjoin(self.gitopt.opt['exec_path'], 'git')
        self.in_git_dir = False

        # When multiple -C options are given, each subsequent non-absolute -C
        # <path> is interpreted relative to the preceding -C <path>.

        st = pabs(".")
        for p in self.gitopt.opt['startpath']:
            st = prebase(st, p)

        self.startpath = st
        self.cwd = self.startpath

        self.git_dir = prebase(self.startpath, self.gitopt.opt['git_dir'])
        self.working_dir = prebase(self.startpath, self.gitopt.opt['work_tree'])

    def out(self, fd, *msg):
        #  TODO not used?

        os.write(fd, b"GIFT: ")

        for m in msg:
            os.write(fd, to_utf8(m))
            os.write(fd, b" ")
        os.write(fd, b"\n")

    def init_git_config(self):

        git_dir_specified = self.git_dir is not None

        if self.git_dir is None:
            try:
                self.git_dir = cmd0(self.gitpath, "rev-parse", "--git-dir", cwd=self.cwd)
                dd("git_dir:", self.git_dir)
                self.git_dir = pabs(self.git_dir)
            except CalledProcessError:
                dd("not in a git dir")

        dd("git_dir:", self.git_dir)

        if self.git_dir is None:
            return

        if (self.cwd.startswith(self.git_dir + '/')
                or self.git_dir == self.cwd):
            self.in_git_dir = True

        if self.in_git_dir:
            return

        # git rev-parse --show-toplevel:
        # - With --git-dir=xx, it always returns current dir.
        # - Without --git-dir=xx, it might fail if cwd is not in a git repo
        if git_dir_specified:
            if self.working_dir is None:
                self.working_dir = self.cwd
            else:
                pass
        else:
            if self.working_dir is None:
                self.working_dir = cmd0(self.gitpath, "rev-parse", "--show-toplevel", cwd=self.cwd)

        dd("working_dir:", self.working_dir)

        self.confpath = self.working_dir + '/' + conffn
        self.conf = self.parse()

    def parse_remote(self, subdir, remo):
        elts = remo.rsplit("@", 1)
        return ["origin", elts[0], elts[1]]

    def read_conf(self):
        try:
            with open(self.confpath, 'r') as f:
                cont = f.read()
        except OSError:
            return {
                "dirs": {}
            }
        yml = yaml.safe_load(cont)
        return yml

    def parse(self):

        yml = self.read_conf()

        # rm = yml.get("remotes", {})
        dirs = yml["dirs"]

        for k in dirs:
            ups = self.parse_remote(k, dirs[k])
            sub_gitdir = self.sub_gitdir_fmt.format(dir=k)
            dirs[k] = {
                "dir": k,
                "upstream": {
                    "name": ups[0],
                    "url": ups[1],
                    "branch": ups[2],
                },
                "refhead": "refs/gift/sub/{dir}".format(dir=k),
                "sub_gitdir": sub_gitdir,
                "env": {
                    "GIT_DIR": pjoin(self.git_dir, sub_gitdir),
                    "GIT_WORK_TREE": pjoin(self.working_dir, k),
                    # "GIT_OBJECT_DIRECTORY": pjoin(self.git_dir, "objects"),
                },
                "bareenv": {
                    "GIT_DIR": pjoin(self.git_dir, sub_gitdir),
                },
            }

        return yml

    def _g(self, what="", bare=False):
        if what == '':
            return Git(
                self.gitopt,
                gitpath=self.gitpath,
                cwd=self.cwd,
            )

        if isinstance(what, str):
            sb = self.conf["dirs"][what]
        else:
            sb = what

        git_dir = sb["env"]["GIT_DIR"]
        working_dir = sb["env"]["GIT_WORK_TREE"]

        if bare:
            return Git(
                self.gitopt,
                gitpath=self.gitpath,
                gitdir=git_dir,
                cwd=self.cwd,
                ctxmsg=sb['dir'],
            )
        else:
            return Git(
                self.gitopt,
                gitpath=self.gitpath,
                gitdir=git_dir,
                working_dir=working_dir,
                cwd=self.cwd,
                ctxmsg=sb['dir'],
            )

    def check_worktree(self, sb):
        self.try_init_sub_git(sb)
        self.try_init_sub_worktree(sb)

    def try_init_sub_git(self, sb):

        wtgpath = pjoin(self.git_dir, sb["sub_gitdir"])

        bareenv = sb['bareenv']
        up = sb["upstream"]

        if not os.path.isdir(wtgpath):
            cmdx(self.gitpath, "init", "--bare", bareenv["GIT_DIR"])
        else:
            dd("gitdir exist:", wtgpath)

        g = self._g(sb, bare=True)
        u = g.remote_get(up["name"])
        if u is None:
            dd("remote not found, add:", up)
            g.out(2, "add remote:", up["name"], up["url"])
            g.remote_add(up["name"], up["url"], capture=False)

        r = g.rev_of(up["name"] + '/' + up["branch"])
        if r is None:
            dd("remote head not found:", up["name"] + '/' + up["branch"])
            dd("need fetch")
            g.out(2, "fetch", up["name"], up["url"])
            g.fetch(up["name"], capture=False)

    def try_init_sub_worktree(self, sb):

        path = sb['env']["GIT_WORK_TREE"]
        if not os.path.isdir(path):
            os.makedirs(path, mode=0o755)

        g = self._g(sb)
        if g.rev_of("HEAD") is None:
            dd("HEAD not found:")
            g.checkout(sb['upstream']["branch"])

    def get_subrepo_config(self, subdir):

        # TODO test subdir not in working_dir?
        working_dir = self.working_dir
        subdir = os.path.abspath(subdir)

        dd("working_dir:", working_dir)
        dd("subdir:", subdir)

        rel = os.path.relpath(subdir, working_dir)
        if rel.startswith('..'):
            dd("subdir is not in working_dir")
            return '', None

        dd("conf:", self.conf["dirs"])

        while rel != '':
            dd("reldir:", rel)
            if rel in self.conf["dirs"]:
                return rel, self.conf["dirs"][rel]

            # trim last part.
            rel, _ = os.path.split(rel)
        else:
            return '', None

    def exec_informative_cmd(self, cmds):
        cmd = cmds[0]
        if cmd == '--version':
            display(1, "gift version " + version)
            self._g().cmdpass('--version')
        elif cmd == '--help':
            self._g().cmdpass('--help')
            lines = [
                "",
                "Gift extended command:",
                "",
                "gift clone --sub <url>@<branch> <dir>",
                "    Add a sub-repo to <dir> by clone it from <url>, and checkout <branch>",
                "",
                "gift commit --sub",
                "    Add all sub-repo to super-repo and commit",
                "",
            ]
            # TODO finish them
            for l in lines:
                display(1, l)
        elif cmd in ('--exec-path',
                     '--man-path',
                     '--info-path',
                     '--html-path',
                     ):
            self._g().cmdpass(cmd)

    def cmd(self, cmds):

        dd("gift cmd:", cmds)

        # If a command does not need to be run inside a git repo, delegate it
        # and quit.
        if cmds[0] == "init" and '--sub' not in cmds:
            # delegate to original git
            # TODO if user invoke "git --git-dir", original git still need env or else
            _, out, err = cmdx(self.gitpath, *cmds)
            display(out, err)
            return

        self.init_git_config()

        if self.git_dir is None:
            self._g().cmdpass(*cmds)
            return

        cmd, issub, cmds = self._arg_param(cmds)

        refs0 = self._get_head_refs()

        if self.in_git_dir:
            if issub:
                raise GiftError("--sub can not be used in git-dir:" + self.git_dir)
            else:
                g = self._g().cmdpass(*cmds)
        else:

            subdir = self.cwd
            subdir, sb = self.get_subrepo_config(subdir)
            dd("subdir:", subdir, sb)

            if sb is not None:
                self.check_worktree(sb)

            # TODO nested?
            if issub:

                if cmd == "init":
                    return self.x_init_sub(cmds)
                if cmd == "clone":
                    return self.x_clone_sub(cmds)
                elif cmd == 'commit':
                    return self.x_commit_sub(cmds)
                elif cmd == 'fetch':
                    return self.x_fetch_sub(cmds)
                elif cmd == 'merge':
                    return self.x_merge_sub(cmds)
                elif cmd == 'reset':
                    return self.x_reset_sub(cmds)

            if sb is not None:
                g = self._g(sb)
                g.cmdpass(*cmds)
            else:
                g = self._g()
                g.cmdpass(*cmds)
                # TODO run gift in a git-dir

        refs1 = self._get_head_refs()
        if refs0 != refs1 and refs1 is not None:
            self._populate_ref(refs1)

    def _arg_param(self, cmds):

        cmd = cmds[0]
        cmds = cmds[1:]

        if '--' in cmds:
            i = cmds.index('--')
            args = cmds[:i]
        else:
            args = cmds

        issub = '--sub' in args
        if issub:
            cmds.remove('--sub')

        return cmd, issub, [cmd] + cmds

    def _get_head_refs(self):
        g = self._g()
        try:
            # TODO should not cmd0
            cont = g.cmd0("show", "HEAD:" + refsfn)
        except CalledProcessError:
            return None

        try:
            return yaml.safe_load(cont)
        except Exception as e:
            print(repr(e))
            return None

    def x_clone_sub(self, cmds):

        # TODO test remove is gift clone --sub ssh://git@github.com/openacid/celeritasdb.wiki wiki
        # there is a "@" in it.
        #
        # TODO test ".gift" without "remotes"
        # TODO test clone --sub
        remote = cmds[1]
        subdir = cmds[2]
        # TODO overwrite existent conf?

        y = self.read_conf()
        y["dirs"][subdir] = remote
        cont = yaml.dump(y, default_flow_style=False)
        fwrite(self.confpath, cont)
        self.init_git_config()

        g = self._g()
        g.cmdx("add", self.confpath)
        g.cmdx("commit", self.confpath, "-m", "add sub repo: " + remote + " in " + subdir)

        self.x_init_sub([])
        self.x_commit_sub([])

    def x_init_sub(self, cmds):
        for sub in self.conf["dirs"]:
            sb = self.conf["dirs"][sub]
            self.check_worktree(sb)

        try:
            cont = fread(pjoin(self.working_dir, refsfn))
        except IOError:
            # TODO message
            pass
        else:
            refs = yaml.safe_load(cont)
            self._populate_ref(refs)

    def x_commit_sub(self, cmds):
        g = self._g()
        supertree = g.get_tree("HEAD")
        parent = g.commit_of("HEAD")
        refs = []
        for sub in self.conf["dirs"]:
            sb = self.conf["dirs"][sub]
            self.check_worktree(sb)
            supertree, commithash = self._add_sub(supertree, sb)
            refs.append([sb["dir"], commithash])

        refs = sorted(refs)
        cont = yaml.dump(refs, default_flow_style=False)
        statep = pjoin(self.working_dir, refsfn)
        fwrite(statep, cont)

        statehash = g.blob_new(statep)
        supertree = g.tree_add_obj(supertree, refsfn, statehash)

        newcommit = g.cmd0("commit-tree", "-p", parent, supertree, input="commit subdirs")
        g.cmdx("reset", newcommit)

        self._populate_ref(refs)

    def x_fetch_sub(self, cmds):
        for sub in self.conf["dirs"]:
            sb = self.conf["dirs"][sub]
            self.check_worktree(sb)
            _, out, err = cmdx(self.gitpath, "fetch", sb["upstream"]["name"], env=sb["env"])
            display(out, err)

    def x_merge_sub(self, cmds):
        # only ff-only allowed
        for sub in self.conf["dirs"]:
            sb = self.conf["dirs"][sub]
            self.check_worktree(sb)
            _, out, err = cmdx(self.gitpath, "merge", "--ff-only", env=sb["env"])
            display(out, err)

    def x_reset_sub(self, cmds):
        candidate_args = ['--soft',
                          '--mixed',
                          '-N',
                          '--hard',
                          '--merge',
                          '--keep',
                          '-q',
                          '--quiet', ]
        args = []
        for c in candidate_args:
            if c in cmds:
                args.append(c)

        for sub in self.conf["dirs"]:
            sb = self.conf["dirs"][sub]
            self.check_worktree(sb)
            _, out, err = cmdx(self.gitpath, "reset", *args, superref, env=sb["env"])
            display(out, err)

    def _populate_ref(self, refs):

        for subdir, hsh in refs:
            sb = self.conf["dirs"][subdir]

            try:
                # TODO test this
                cmdx(self.gitpath, "update-ref", superref, hsh, env=sb["env"])
            except CalledProcessError:
                # TODO

                dd("can not update ref")

    def _add_sub(self, supertree, sb):
        g = self._g()

        g.cmdx("fetch", sb["env"]["GIT_DIR"], "+HEAD:" + sb["refhead"])

        sub_tree = g.get_tree(sb["refhead"])
        supertree = g.tree_add_obj(supertree, sb["dir"], sub_tree)

        return supertree, g.commit_of(sb["refhead"])


class Git(object):

    def __init__(self, opt, gitpath=None, gitdir=None, working_dir=None, cwd=None, ctxmsg=None):
        self.opt = opt.clone()
        # gitdir and working_dir is specified and do not consider '-C' option
        if gitdir is not None:
            self.opt.opt['git_dir'] = pabs(gitdir)
        if working_dir is not None:
            self.opt.opt['work_tree'] = pabs(working_dir)

        self.cwd = cwd

        self.gitpath = gitpath or "git"
        self.ctxmsg = ctxmsg

    def out(self, fd, *msg):
        #  TODO not used?

        os.write(fd, b"GIFT: ")

        if self.ctxmsg is not None:
            os.write(fd, to_utf8(self.ctxmsg) + b": ")

        for m in msg:
            os.write(fd, to_utf8(m))
            os.write(fd, b" ")
        os.write(fd, b"\n")

    def _opt(self, **kwargs):
        opt = {}
        if self.cwd is not None:
            opt["cwd"] = self.cwd
        opt.update(kwargs)
        return opt

    def _args(self):
        return self.opt.to_args()

    def commit_of(self, ref):
        """
        Get the hash of a commit.

        Args:

            ref(str): short hash, full length hash, ref name or branch.

        Returns:
            str: sha256 in lower-case hex.
        """
        return self.cmd0("rev-parse", ref)

    def blob_new(self, f):
        return self.cmd0("hash-object", "-w", f)

    def checkout(self, branch):
        self.cmdx("checkout", branch)

    def fetch(self, name, **options):
        self.cmdx("fetch", name, **options)

    def get_tree(self, commit):
        return self.cmd0("rev-parse", commit + "^{tree}")

    def rev_of(self, name):
        """
        Get the revision(sha256) of an object.

        Args:

            name(str): could be short hash, full length hash, ref name or branch.

        Returns:
            str: sha256 in lower-case hex. If no such object is found, it returns None.
        """
        try:
            return self.cmd0("rev-parse", "--verify", "--quiet", name)
        except CalledProcessError:
            return None

    def remote_get(self, name):
        try:
            return self.cmd0("remote", "get-url", name)
        except CalledProcessError:
            return None

    def remote_add(self, name, url, **options):
        self.cmdx("remote", "add", name, url, **options)

    def tree_items(self, treeish, name_only=False):
        args = []
        if name_only:
            args.append("--name-only")
        return self.cmdout("ls-tree", treeish, *args)

    def tree_add_obj(self, cur_tree, path, treeish):

        sep = os.path.sep

        itms = self.tree_items(cur_tree)

        if sep not in path:
            return self.tree_new(itms, path, treeish)

        # a/b/c -> a, b/c
        p0, left = path.split(sep, 1)
        p0item = self.tree_find_item(cur_tree, fn=p0, typ="tree")

        if p0item is None:

            newsubtree = treeish
            for p in reversed(left.split(sep)):
                newsubtree = self.tree_new([], p, newsubtree)
        else:

            subtree = p0item["object"]
            newsubtree = self.tree_add_obj(subtree, left, treeish)

        return self.tree_new(itms, p0, newsubtree)

    def tree_find_item(self, treeish, fn=None, typ=None):
        for itm in self.tree_items(treeish):
            itm = self.parse_tree_item(itm)
            if fn is not None and itm["fn"] != fn:
                continue
            if typ is not None and itm["type"] != typ:
                continue

            return itm
        return None

    def parse_tree_item(self, line):

        # git-ls-tree output:
        #     <mode> SP <type> SP <object> TAB <file>
        # This output format is compatible with what --index-info --stdin of git update-index expects.
        # When the -l option is used, format changes to
        #     <mode> SP <type> SP <object> SP <object size> TAB <file>
        # E.g.:
        # 100644 blob a668431ae444a5b68953dc61b4b3c30e066535a2    imsuperman
        # 040000 tree a668431ae444a5b68953dc61b4b3c30e066535a2    foo

        p, fn = line.split("\t", 1)

        elts = p.split(" ")
        rst = {
            "mode": elts[0],
            "type": elts[1],
            "object": elts[2],
            "fn": fn,
        }
        if len(elts) == 4:
            rst["size"] = elts[3]

        return rst

    def tree_new(self, itms, name, obj):

        typ = self.obj_type(obj)
        item_fmt = "{mode} {typ} {object}\t{name}"

        newitems = [x for x in itms
                    if self.parse_tree_item(x)["fn"] != name]

        # add a new item
        if typ == 'tree':
            mode = "040000"
        else:
            mode = "100644"
        itm = item_fmt.format(mode=mode,
                              typ=typ,
                              object=obj,
                              name=name
                              )
        newitems.append(itm)
        new_treeish = self.cmd0("mktree", input="\n".join(newitems))
        return new_treeish

    def obj_type(self, obj):
        return self.cmd0("cat-file", "-t", obj)

    def cmd0(self, *args, **kwargs):
        return cmd0(self.gitpath, *self._args(), *args, **self._opt(**kwargs))

    def cmdout(self, *args, **kwargs):
        return cmdout(self.gitpath, *self._args(), *args, **self._opt(**kwargs))

    def cmdx(self, *args, **kwargs):
        return cmdx(self.gitpath, *self._args(), *args, **self._opt(**kwargs))

    def cmdpass(self, *args, **kwargs):
        return cmdpass(self.gitpath, *self._args(), *args, **self._opt(**kwargs))


def git_args():
    args = sys.argv[1:]

    gitopt = GitOpt().parse_args(args, {'--gift-verbose': True})

    verbose = 0
    v = os.environ.get('GIFT_VERBOSE')
    if v is not None:
        verbose = int(v)

    if '--gift-verbose' in gitopt.additional:
        verbose = 1

    return gitopt, verbose, gitopt.cmds


if __name__ == "__main__":
    gitopt, verbose, cmds = git_args()

    dd("gift opt:", gitopt.opt)
    dd("gift cmds:", cmds)
    # TODO need to pass opt to delegated command
    # TODO test change remote/up['branch'] then init again.
    # TODO git box received a unexpected GIT_DIR env.
    # TODO test command such "git box": git-box: git rev-parse --git-dir
    gift = Gift(gitopt)

    lvl = logging.INFO
    if verbose > 0:
        lvl = logging.DEBUG

    k3log.make_logger(
            fmt= '[%(asctime)s,%(filename)s,%(lineno)d,%(levelname)s] %(message)s',
            level=lvl)

    if cmds == [] and len(gitopt.informative_cmds) == 0:
        gift.exec_informative_cmd(['--help'])
        sys.exit(1)

    if cmds != [] and cmds[0] == 'gift-debug':
        display(1, ' '.join(cmds))
        display(1, yaml.dump({"opt": gitopt.opt,
                           "informative_cmds": gitopt.informative_cmds,
                           "additional": gitopt.additional},
                          default_flow_style=False))
        display(1, "evaluated cwd: " + str(gift.cwd))
        display(1, "evaluated git_dir: " + str(gift.git_dir))
        display(1, "evaluated working_dir: " + str(gift.working_dir))
        sys.exit(0)

    try:
        if len(gitopt.informative_cmds) > 0:
            gift.exec_informative_cmd(list(gitopt.informative_cmds))
        else:
            gift.cmd(cmds)
    except CalledProcessError as e:
        display(e.out, e.err)
        sys.exit(e.returncode)
    except GiftError as e:
        display(e.out, e.err)
        sys.exit(e.returncode)
    except KeyboardInterrupt:
        display(2, "user interrupted")
        sys.exit(1)
